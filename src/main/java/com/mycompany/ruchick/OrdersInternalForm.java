/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.mycompany.ruchick;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Muhamad Fadhly
 */
public class OrdersInternalForm extends javax.swing.JInternalFrame {

    /**
     * Creates new form OrdersInternalForm
     */
    public OrdersInternalForm() {
        initComponents();
        setRowColors();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI ui = (BasicInternalFrameUI) this.getUI();
        ui.setNorthPane(null);
        bacaOrders();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void bacaOrders(){
        DefaultTableModel ordersTbl = new DefaultTableModel(){
            @Override
            public boolean isCellEditable (int row, int column){
                return false;
            }
        };
            ordersTbl.addColumn("Orders ID");
            ordersTbl.addColumn("Customer");
            ordersTbl.addColumn("Order Date");
            ordersTbl.addColumn("Total Pembelian");
            ordersTbl.addColumn("Dibayar");

        try {
            String perintahSQL_tampilData = "SELECT o.order_id, c.name, o.order_date, o.total_amount, o.paid "
                    + "FROM orders o JOIN customers c ON o.customer_id = c.customer_id";

            Connection penghubung_database = (Connection)koneksi_database.konfigurasi_database();

            Statement statementSQL = penghubung_database.createStatement();

            ResultSet hasilSQL = statementSQL.executeQuery(perintahSQL_tampilData);

//            int i = 1;
            while (hasilSQL.next()) {
                String status = hasilSQL.getString(5);
                String statusText;

                if ("1".equals(status)) {
                    statusText = "Sudah";
                } else if ("0".equals(status)) {
                    statusText = "Belum";
                } else {
                    statusText = "Tidak Diketahui"; // Ini untuk menangani kemungkinan nilai lain selain 1 atau 0
                }
                ordersTbl.addRow(new Object[]{
                    hasilSQL.getString(1),
                    hasilSQL.getString(2),
                    hasilSQL.getString(3),
                    hasilSQL.getString(4),
                    statusText
//                    hasilSQL.getString(5)
                });

                tabelOrders.setModel(ordersTbl);

            }

        } catch (Exception e) {
            // 07. Pesan Error kalau gagal
        }
    }
    public void bersih_layar(){
        orderId.setText("");
        nama.setText("");
        tanggal.setText("");
        totalHarga.setText("");
        totalBayar.setText("");
        kembalian.setText("");
    }
    private boolean isFloat(String str) {
        try {
            Float.parseFloat(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelOrders = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelOrderDetails = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        nama = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tanggal = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        totalHarga = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        totalBayar = new javax.swing.JTextField();
        kembalian = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        bayarButton = new javax.swing.JButton();
        orderId = new javax.swing.JTextField();
        dibayar = new javax.swing.JLabel();
        printButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(40, 40, 100));
        jLabel2.setText("Orders Management");

        tabelOrders.setBackground(new java.awt.Color(229, 230, 236));
        tabelOrders.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tabelOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Order ID", "Customer", "Order Date", "Total Harga", "Dibayar"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelOrders.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelOrdersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelOrders);
        if (tabelOrders.getColumnModel().getColumnCount() > 0) {
            tabelOrders.getColumnModel().getColumn(0).setResizable(false);
            tabelOrders.getColumnModel().getColumn(0).setPreferredWidth(20);
            tabelOrders.getColumnModel().getColumn(1).setResizable(false);
            tabelOrders.getColumnModel().getColumn(1).setPreferredWidth(50);
            tabelOrders.getColumnModel().getColumn(2).setResizable(false);
            tabelOrders.getColumnModel().getColumn(2).setPreferredWidth(50);
            tabelOrders.getColumnModel().getColumn(3).setResizable(false);
            tabelOrders.getColumnModel().getColumn(3).setPreferredWidth(50);
            tabelOrders.getColumnModel().getColumn(4).setResizable(false);
            tabelOrders.getColumnModel().getColumn(4).setPreferredWidth(20);
        }

        tabelOrderDetails.setBackground(new java.awt.Color(229, 230, 236));
        tabelOrderDetails.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tabelOrderDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Detail ID", "Order ID", "Nama Menu", "Qty", "Harga Satuan"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tabelOrderDetails);
        if (tabelOrderDetails.getColumnModel().getColumnCount() > 0) {
            tabelOrderDetails.getColumnModel().getColumn(0).setResizable(false);
            tabelOrderDetails.getColumnModel().getColumn(0).setPreferredWidth(30);
            tabelOrderDetails.getColumnModel().getColumn(1).setResizable(false);
            tabelOrderDetails.getColumnModel().getColumn(1).setPreferredWidth(20);
            tabelOrderDetails.getColumnModel().getColumn(2).setResizable(false);
            tabelOrderDetails.getColumnModel().getColumn(2).setPreferredWidth(120);
            tabelOrderDetails.getColumnModel().getColumn(3).setResizable(false);
            tabelOrderDetails.getColumnModel().getColumn(3).setPreferredWidth(20);
            tabelOrderDetails.getColumnModel().getColumn(4).setResizable(false);
            tabelOrderDetails.getColumnModel().getColumn(4).setPreferredWidth(50);
        }

        jPanel2.setBackground(new java.awt.Color(229, 230, 236));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Order ID:");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 70, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Nama Customer:");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, -1, -1));

        nama.setEditable(false);
        nama.setBackground(new java.awt.Color(255, 255, 255));
        nama.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        nama.setEnabled(false);
        jPanel2.add(nama, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 110, 170, 25));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Tanggal:");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 30, -1, -1));

        tanggal.setEditable(false);
        tanggal.setBackground(new java.awt.Color(255, 255, 255));
        tanggal.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tanggal.setEnabled(false);
        tanggal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tanggalActionPerformed(evt);
            }
        });
        jPanel2.add(tanggal, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 30, 170, 25));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Total Harga:");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 150, -1, -1));

        totalHarga.setEditable(false);
        totalHarga.setBackground(new java.awt.Color(255, 255, 255));
        totalHarga.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        totalHarga.setEnabled(false);
        jPanel2.add(totalHarga, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 150, 170, 25));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Total Bayar:");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 220, -1, -1));

        totalBayar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jPanel2.add(totalBayar, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 220, 170, 25));

        kembalian.setEditable(false);
        kembalian.setBackground(new java.awt.Color(255, 255, 255));
        kembalian.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        kembalian.setEnabled(false);
        jPanel2.add(kembalian, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 260, 170, 25));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Kembalian:");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 260, -1, -1));

        bayarButton.setBackground(new java.awt.Color(40, 40, 100));
        bayarButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        bayarButton.setForeground(new java.awt.Color(255, 255, 255));
        bayarButton.setText("Bayar");
        bayarButton.setBorderPainted(false);
        bayarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bayarButtonActionPerformed(evt);
            }
        });
        jPanel2.add(bayarButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 400, -1, 30));

        orderId.setEditable(false);
        orderId.setBackground(new java.awt.Color(255, 255, 255));
        orderId.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        orderId.setEnabled(false);
        jPanel2.add(orderId, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 70, 170, 25));

        dibayar.setBackground(new java.awt.Color(229, 230, 236));
        dibayar.setForeground(new java.awt.Color(229, 230, 236));
        jPanel2.add(dibayar, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 120, -1, -1));

        printButton.setBackground(new java.awt.Color(40, 40, 100));
        printButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        printButton.setForeground(new java.awt.Color(255, 255, 255));
        printButton.setText("Print Struk");
        printButton.setBorderPainted(false);
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });
        jPanel2.add(printButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 400, -1, 30));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel6.setText("Order Customers");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel9.setText("Order Detail");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel10.setText("Payments");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
                                .addComponent(jScrollPane1))
                            .addComponent(jLabel9)
                            .addComponent(jLabel6))
                        .addGap(42, 42, 42)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(168, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9)
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(95, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        
    
    private void setRowColors() {
         // Mendapatkan renderer sel default dari tabel
        DefaultTableCellRenderer defaultRenderer = (DefaultTableCellRenderer) tabelOrders.getDefaultRenderer(Object.class);

        // Mengatur renderer sel kustom untuk mengatur warna latar belakang baris bergantian
        tabelOrders.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public java.awt.Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                final java.awt.Component c = defaultRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                // Mengatur warna latar belakang baris bergantian
                if (row % 2 == 0) {
                    c.setBackground(java.awt.Color.WHITE);
                } else {
                    c.setBackground(new java.awt.Color(173, 216, 230));
                }
                c.setForeground(java.awt.Color.BLACK);
                return c;
            }
        });
        DefaultTableCellRenderer defaultRendererDetails = (DefaultTableCellRenderer) tabelOrderDetails.getDefaultRenderer(Object.class);
        tabelOrderDetails.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public java.awt.Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                final java.awt.Component c = defaultRendererDetails.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                // Mengatur warna latar belakang baris bergantian
                if (row % 2 == 0) {
                    c.setBackground(java.awt.Color.WHITE);
                } else {
                    c.setBackground(new java.awt.Color(173, 216, 230));
                }
                c.setForeground(java.awt.Color.BLACK);
                return c;
            }
        });
    }
    private String getOrderDetails(String orderId) {
        StringBuilder details = new StringBuilder();
        try {
            String query = "SELECT od.order_detail_id, mi.name, od.quantityOrdered, od.priceEach, "
                    + "(od.quantityOrdered * od.priceEach) AS total_price_per_item "
                    + "FROM order_details od JOIN menu_items mi ON od.menu_item_id = mi.menu_item_id "
                    + "WHERE od.order_id = ?";

            Connection conn = koneksi_database.konfigurasi_database();
            PreparedStatement pstmt = conn.prepareStatement(query);
            pstmt.setString(1, orderId);

            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                // Menghitung total harga per item dan menambahkannya ke StringBuilder
                float totalPricePerItem = rs.getFloat("quantityOrdered") * rs.getFloat("priceEach");
                details.append(String.format("%-4s %-15s %-5s %-10s %-10s\n",
                    rs.getString("order_detail_id"),
                    rs.getString("name"),
                    rs.getString("quantityOrdered"),
                    rs.getString("priceEach"),
                    totalPricePerItem));
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Terjadi kesalahan saat mengambil detail order: " + e.getMessage());
        }
        return details.toString();
    }
    private void tabelOrdersMouseClicked(java.awt.event.MouseEvent evt) {                                         
            // TODO add your handling code here:
            // Mengambil data dari Tabel ke dalam text field
            int baris = tabelOrders.rowAtPoint(evt.getPoint());
            String tampilID = tabelOrders.getValueAt(baris, 0).toString();
            orderId.setText(tampilID);
            String tampilNama = tabelOrders.getValueAt(baris, 1).toString();
            nama.setText(tampilNama);
            String tampilTanggal = tabelOrders.getValueAt(baris, 2).toString();
            tanggal.setText(tampilTanggal);
            String tampilHarga = tabelOrders.getValueAt(baris, 3).toString();
            totalHarga.setText(tampilHarga);
            String tampilBayar = tabelOrders.getValueAt(baris, 4).toString();
            dibayar.setText(tampilBayar);
            
            // Set Tabel Order Details
            DefaultTableModel detailsTbl = new DefaultTableModel(){
                @Override
                public boolean isCellEditable (int row, int column){
                    return false;
                }
            };
            detailsTbl.addColumn("Detail Order ID");
            detailsTbl.addColumn("Order ID");
            detailsTbl.addColumn("Nama Menu");
            detailsTbl.addColumn("Jumlah");
            detailsTbl.addColumn("Harga");
            
            tabelOrderDetails.setModel(detailsTbl);
            setRowColors();
        try {
            int idOrder = Integer.parseInt(tabelOrders.getValueAt(baris, 0).toString());

            String perintahSQL_tampilDetails = "SELECT od.order_detail_id, od.order_id, m.name, od.quantityOrdered, od.priceEach "
                    + "FROM order_details od JOIN menu_items m ON od.menu_item_id = m.menu_item_id WHERE order_id="+idOrder+"";

            Connection penghubung_database = (Connection)koneksi_database.konfigurasi_database();

            Statement statementSQL = penghubung_database.createStatement();

            ResultSet hasilSQL = statementSQL.executeQuery(perintahSQL_tampilDetails);

//            int i = 1;
            while (hasilSQL.next()) {
                detailsTbl.addRow(new Object[]{
                    hasilSQL.getString(1),
                    idOrder,
                    hasilSQL.getString(3),
                    hasilSQL.getString(4),
                    hasilSQL.getString(5)
                });

                tabelOrderDetails.setModel(detailsTbl);

            }

        } catch (Exception e) {
            // 07. Pesan Error kalau gagal
        }    
    }                                        

    private void tanggalActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    private void bayarButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        try {
            // Retrieve and validate fields
            String inputId = orderId.getText();
            if (inputId.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Pilih order yang akan dibayar terlebih dahulu.", "Kesalahan Input", JOptionPane.DEFAULT_OPTION);
                return;
            }

            int idOrder = Integer.parseInt(inputId);

            String totalHargaText = totalHarga.getText();
            if (totalHargaText.isEmpty() || !isFloat(totalHargaText)) {
                JOptionPane.showMessageDialog(null, "Total harga tidak valid.", "Kesalahan Input", JOptionPane.DEFAULT_OPTION);
                return;
            }
            float total = Float.parseFloat(totalHargaText); // Menggunakan tipe float

            String stringBayar = totalBayar.getText();
            if (stringBayar.isEmpty() || !isFloat(stringBayar)) {
                JOptionPane.showMessageDialog(null, "Masukkan nominal pembayaran yang valid.", "Kesalahan Input", JOptionPane.DEFAULT_OPTION);
                return;
            }
            float inputBayar = Float.parseFloat(stringBayar); // Menggunakan tipe float

            String validasiBayar = dibayar.getText();
            String namaCus = nama.getText();

            if ("Sudah".equals(validasiBayar)) {
                JOptionPane.showMessageDialog(null, "Pesanan " + namaCus + " sudah dibayar.", "Kesalahan Data", JOptionPane.DEFAULT_OPTION);
                return;
            } else if (inputBayar < total) {
                JOptionPane.showMessageDialog(null, "Nominal pembayaran tidak valid", "Kesalahan Input", JOptionPane.DEFAULT_OPTION);
                return;
            }

            // Calculate change
            float outputKembalian = inputBayar - total; // Menggunakan tipe float
            String strKembalian = Float.toString(outputKembalian); // Menggunakan tipe float
            kembalian.setText(strKembalian);

            // Confirm and process payment
//            int confirm = JOptionPane.showConfirmDialog(null, "Selesaikan Pembayaran Tanpa Print Struk?", "Konfirmasi Bayar", JOptionPane.YES_NO_OPTION);
//            if (confirm == JOptionPane.YES_OPTION) {
            try {
                    // Update the order status in the database
                    String sql_update = "UPDATE orders SET paid = ? WHERE order_id = ?";
                    Connection penghubungdatabase = (Connection)koneksi_database.konfigurasi_database();
                    PreparedStatement query_update = penghubungdatabase.prepareStatement(sql_update);
                    query_update.setString(1, "1");  // Assuming "1" means "paid"
                    query_update.setInt(2, idOrder);

                    query_update.executeUpdate();

                    // Notify success
                    JOptionPane.showMessageDialog(null, "Pesanan Berhasil dibayar");
                    bacaOrders();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Kesalahan: " + e.getMessage());
                }    
//            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Terjadi kesalahan dalam format angka: " + e.getMessage(), "Kesalahan Input", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Terjadi kesalahan: " + e.getMessage(), "Kesalahan", JOptionPane.ERROR_MESSAGE);
        }
    }                                           

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        // Mendapatkan informasi pesanan dari text fields
        String orderIdText = orderId.getText();
        String namaCustomer = nama.getText();
        String tanggalOrder = tanggal.getText();
        String totalHargaText = totalHarga.getText();
        String totalBayarText = totalBayar.getText();
        String kembalianText = kembalian.getText();

        // Mendapatkan detail order
        String orderDetails = getOrderDetails(orderIdText);

        // Membuat konten struk
        StringBuilder struk = new StringBuilder();
        struk.append("==============================\n");
        struk.append("         STRUK PEMBAYARAN         \n");
        struk.append("==============================\n");
        struk.append("Order ID       : ").append(orderIdText).append("\n");
        struk.append("Nama Customer  : ").append(namaCustomer).append("\n");
        struk.append("Tanggal        : ").append(tanggalOrder).append("\n");
        struk.append("==============================\n");
        struk.append("ID   Nama Menu      Qty    Harga      Total\n");
        struk.append("------------------------------\n");
        struk.append(orderDetails);  // Menambahkan detail order ke struk
        struk.append("==============================\n");
        struk.append(String.format("%-20s: %s\n", "Total Harga", totalHargaText));
        struk.append(String.format("%-20s: %s\n", "Total Bayar", totalBayarText));
        struk.append(String.format("%-20s: %s\n", "Kembalian", kembalianText));
        struk.append("==============================\n");
        struk.append("      Terima Kasih!      \n");
        struk.append("   Selamat Datang Kembali   \n");
        struk.append("==============================\n");

        // Menyimpan struk ke dalam file .txt
        try {
            java.io.FileWriter writer = new java.io.FileWriter("Struk_Order_" + orderIdText + ".txt");
            writer.write(struk.toString());
            writer.close();
            JOptionPane.showMessageDialog(null, "Struk berhasil dicetak ke dalam file Struk_Order_" + orderIdText + ".txt");
            bacaOrders();
            bersih_layar();
        } catch (java.io.IOException e) {
            JOptionPane.showMessageDialog(null, "Terjadi kesalahan saat mencetak struk: " + e.getMessage());
        }        
    }                                           


    // Variables declaration - do not modify                     
    private javax.swing.JButton bayarButton;
    private javax.swing.JLabel dibayar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField kembalian;
    private javax.swing.JTextField nama;
    private javax.swing.JTextField orderId;
    private javax.swing.JButton printButton;
    private javax.swing.JTable tabelOrderDetails;
    private javax.swing.JTable tabelOrders;
    private javax.swing.JTextField tanggal;
    private javax.swing.JTextField totalBayar;
    private javax.swing.JTextField totalHarga;
    // End of variables declaration                   
}
